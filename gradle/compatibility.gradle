configurations {
    binaryCompatibility
}

dependencies {
    def excludeList = [
        'ktor-client-tests',
        'ktor-client-js',
        'ktor-client-json-tests',
        'ktor-client-curl',
        'ktor-client-ios',
        'ktor-client',
        'ktor-client-features'
    ].toSet()

    def projects = [].toSet()
    def queue = [
        project(":ktor-client"),
        project(":ktor-http"),
        project(":ktor-network"),
        project(":ktor-utils")
    ]

    while (!queue.isEmpty()) {
        def project = queue.remove(queue.size() - 1) as Project
        if (projects.add(project)) {
            queue += project.childProjects.values()
        }
    }

    binaryCompatibility projects.findAll { !excludeList.contains(it.name) }
}

def buildList = {
    def workQueue = []
    def allModules = new HashSet<ProjectDependency>()

    workQueue += configurations.binaryCompatibility.allDependencies.findAll { it instanceof ProjectDependency }

    while (!workQueue.isEmpty()) {
        def project = workQueue.remove(workQueue.size() - 1)

        if (project instanceof ProjectDependency && allModules.add(project)) {
            project.dependencyProject.configurations.forEach { configuration ->
//                println configuration.allDependencies.withType(ProjectDependency)
//                if (!configuration.name.toLowerCase().contains('test') && configuration.name.toLowerCase().contains("jvm")) {
//                    workQueue += configuration.allDependencies.findAll { it instanceof ProjectDependency }
//                } else if (configuration.name == 'compile') {
//                    def task = project.dependencyProject.tasks.findByName('compileKotlin')
//                    if (task != null) {
//                        workQueue += configuration.allDependencies.findAll { it instanceof ProjectDependency }
//                    }
//                }
            }
        }
    }

    return allModules
        .toList()
        .sort { it.name }
        .findAll {
        def isCommon = it.dependencyProject.file("common").exists()
        def isJvm = it.dependencyProject.file("jvm").exists()
        isCommon || isJvm ? it.dependencyProject : null
    }
}

project.ext.buildList = buildList

//println "List of modules: \n" + modulesForBinaryCompatibility.collect { it.name }.sort().join('\n')
